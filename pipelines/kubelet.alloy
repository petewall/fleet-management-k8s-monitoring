discovery.kubernetes "nodes" {
	role = "node"
}

prometheus.scrape "kubelet" {
	targets           = discovery.kubernetes.nodes.targets
	job_name          = "integrations/kubernetes/kubelet"
	scheme            = "https"
	bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

	tls_config {
		ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
		insecure_skip_verify = true
		server_name          = "kubernetes"
	}

	clustering {
		enabled = true
	}

	forward_to = [prometheus.relabel.kubelet_metrics.receiver]
}

prometheus.relabel "kubelet_metrics" {
  // Metrics allow list
  rule {
    source_labels = ["__name__"]
    regex = "up|scrape_samples_scraped|go_goroutines|kubelet_certificate_manager_client_expiration_renew_errors|kubelet_certificate_manager_client_ttl_seconds|kubelet_certificate_manager_server_ttl_seconds|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_cgroup_manager_duration_seconds_count|kubelet_node_config_error|kubelet_node_name|kubelet_pleg_relist_duration_seconds_bucket|kubelet_pleg_relist_duration_seconds_count|kubelet_pleg_relist_interval_seconds_bucket|kubelet_pod_start_duration_seconds_bucket|kubelet_pod_start_duration_seconds_count|kubelet_pod_worker_duration_seconds_bucket|kubelet_pod_worker_duration_seconds_count|kubelet_running_container_count|kubelet_running_containers|kubelet_running_pod_count|kubelet_running_pods|kubelet_runtime_operations_errors_total|kubelet_runtime_operations_total|kubelet_server_expiration_renew_errors|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_free|kubelet_volume_stats_inodes_used|kubelet_volume_stats_used_bytes|kubernetes_build_info|namespace_workload_pod|process_cpu_seconds_total|process_resident_memory_bytes|rest_client_requests_total|storage_operation_duration_seconds_count|storage_operation_errors_total|volume_manager_total_volumes"
    action = "keep"
  }

	forward_to = [prometheus.remote_write.grafana_cloud_metrics.receiver]
}

prometheus.remote_write "grafana_cloud_metrics" {
	endpoint {
		url = "https://prometheus-prod-10-prod-us-central-0.grafana.net/api/prom/push"

		basic_auth {
			username = "622181"
			password = sys.env("GCLOUD_RW_API_KEY")
		}

		write_relabel_config {
			target_label = "cluster"
			replacement  = argument.attributes.value["cluster"]
		}
	}
}