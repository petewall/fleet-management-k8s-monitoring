loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"
  forward_to = [loki.process.cluster_events.receiver]
}

loki.process "cluster_events" {
  stage.logfmt {
    mapping = {
      "component" = "sourcecomponent", // map the sourcecomponent field to component
      "kind" = "",
      "level" = "type", // most events don't have a level but they do have a "type" i.e. Normal, Warning, Error, etc.
      "name" = "",
      "node" = "sourcehost", // map the sourcehost field to node
      "reason" = "",
    }
  }

  // set these values as labels, they may or may not be used as index labels in Loki as they can be dropped
  // prior to being written to Loki, but this makes them available
  stage.labels {
    values = {
      "component" = "",
      "kind" = "",
      "level" = "",
      "name" = "",
      "node" = "",
      "reason" = "",
    }
  }

  // if kind=Node, set the node label by copying the name field
  stage.match {
    selector = "{kind=\"Node\"}"

    stage.labels {
      values = {
        "node" = "name",
      }
    }
  }

  // set the level extracted key value as a normalized log level
  stage.match {
    selector = "{level=\"Normal\"}"

    stage.static_labels {
      values = {
        level = "Info",
      }
    }
  }
  stage.structured_metadata {
    values = {
      "name" = "name",
    }
  }

  // Only keep the labels that are defined in the `keepLabels` list.
  stage.label_keep {
    values = ["job","level","namespace","node","source","reason"]
  }
  stage.labels {
    values = {
      "service_name" = "job",
    }
  }
  stage.static_labels {
    values = {
      cluster = sys.env("CLUSTER_NAME"),
    }
  }

  forward_to = [loki.write.grafana_cloud_loki.receiver]
}

loki.write "grafana_cloud_loki" {
	endpoint {
		url = "https://logs-prod3.grafana.net/loki/api/v1/push"

		basic_auth {
			username = "310060"
			password = sys.env("GCLOUD_RW_API_KEY")
		}
	}
}
